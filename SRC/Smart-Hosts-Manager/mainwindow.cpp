/*
    Copyright (C) 2020  Aaron Feng

    This program is free software: you can redistribute it and/or modify
    it under the terms of the GNU Affero General Public License as published
    by the Free Software Foundation, either version 3 of the License, or
    (at your option) any later version.

    This program is distributed in the hope that it will be useful,
    but WITHOUT ANY WARRANTY; without even the implied warranty of
    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
    GNU Affero General Public License for more details.

    You should have received a copy of the GNU Affero General Public License
    along with this program.  If not, see <https://www.gnu.org/licenses/>.

    My Github homepage: https://github.com/AaronFeng753
*/

#include "mainwindow.h"
#include "ui_mainwindow.h"

MainWindow::MainWindow(QWidget *parent)
    : QMainWindow(parent)
    , ui(new Ui::MainWindow)
{
    ui->setupUi(this);
    Init_Table();
    connect(this, SIGNAL(Send_TestAndOutput_Fin()), this, SLOT(TestAndOutput_Fin()));
    connect(this, SIGNAL(Send_TextBrowser_NewMSG(QString)), this, SLOT(TextBrowser_NewMSG(QString)));
    //===================================
    QFont font;
    font = qApp->font();
    font.setPixelSize(15);
    qApp->setFont(font);
    //===================================
    this->adjustSize();
}

MainWindow::~MainWindow()
{
    delete ui;
}

void MainWindow::closeEvent(QCloseEvent *event)
{
    Ping_MAIN.cancel();
    Force_close();
}

int MainWindow::Force_close()
{
    QProcess Close;
    Close.start("taskkill /f /t /fi \"imagename eq Smart-Hosts-Manager.exe\"");
    Close.waitForStarted(10000);
    Close.waitForFinished(10000);
    return 0;
}

void MainWindow::Init_Table()
{
    Table_model->setColumnCount(2);
    Table_model->setHeaderData(0, Qt::Horizontal, "网址");
    Table_model->setHeaderData(1, Qt::Horizontal, "IP");
    ui->tableView->horizontalHeader()->setDefaultAlignment(Qt::AlignLeft);
    ui->tableView->setModel(Table_model);
    ui->tableView->horizontalHeader()->setSectionResizeMode(QHeaderView::ResizeToContents);
    //=============================================
    //将横向表头设置为可见
    ui->tableView->horizontalHeader()->setVisible(1);
}

void MainWindow::on_pushButton_AddWebSite_clicked()
{
    QString input = ui->lineEdit_addWebSite->text().trimmed();
    if(input=="")
    {
        return;
    }
    //=============
    ui->tableView->setUpdatesEnabled(false);
    int rowNum = Table_model->rowCount();
    Table_model->setItem(rowNum, 0, new QStandardItem(input));
    //========
    QAbstractItemModel *modessl = Table_model;
    QModelIndex indextemp = modessl->index(rowNum, 1);
    ui->tableView->scrollTo(indextemp);
    //========
    ui->tableView->setUpdatesEnabled(true);
}

void MainWindow::on_pushButton_AddIP_clicked()
{
    QString input = ui->lineEdit_addIP->text().trimmed();
    if(input=="")
    {
        return;
    }
    if(curRow!=-1)
    {
        ui->tableView->setUpdatesEnabled(false);
        int rowNum = curRow;
        Table_model->setItem(rowNum, 1, new QStandardItem(input));
        //========
        QAbstractItemModel *modessl = Table_model;
        QModelIndex indextemp = modessl->index(rowNum, 1);
        ui->tableView->scrollTo(indextemp);
        //========
        ui->tableView->setUpdatesEnabled(true);
    }
    else
    {
        QMessageBox *MSG = new QMessageBox();
        MSG->setWindowTitle("错误");
        MSG->setText("您未选中任何条目.请先在列表中选中条目后继续.");
        MSG->setIcon(QMessageBox::Information);
        MSG->setModal(true);
        MSG->show();
        return;
    }
}

void MainWindow::on_tableView_clicked(const QModelIndex &index)
{
    int curRow_new = ui->tableView->currentIndex().row();
    if(curRow_new == curRow)
    {
        curRow = -1;
        ui->tableView->clearSelection();
    }
    else
    {
        curRow = curRow_new;
    }
}

void MainWindow::on_pushButton_TestAndOutput_clicked()
{
    ui->pushButton_TestAndOutput->setEnabled(0);
    ui->groupBox_AddIP->setEnabled(0);
    ui->groupBox_AddWebSite->setEnabled(0);
    ui->pushButton_ClearList->setEnabled(0);
    ui->pushButton_DeleteItem->setEnabled(0);
    ui->pushButton_ReadList->setEnabled(0);
    ui->tableView->setEditTriggers(QAbstractItemView::NoEditTriggers);
    //==========
    OutPut_List.clear();
    OutPut_List.append("# Generated by Smart-Hosts-Manager");
    OutPut_List.append("# https://github.com/AaronFeng753/Smart-Hosts-Manager");
    OutPut_List.append("");
    ui->textBrowser_hosts->clear();
    ui->textBrowser_progress->clear();
    ui->textBrowser_progress->append("开始测试选优, 请耐心等待.");
    //=========
    Ping_MAIN = QtConcurrent::run(this, &MainWindow::TestAndOutput);
}
void MainWindow::TestAndOutput()
{
    int MAXrowNum = Table_model->rowCount();
    if(MAXrowNum==0)
    {
        Send_TextBrowser_NewMSG("列表为空!");
        emit Send_TestAndOutput_Fin();
        return;
    }
    QAbstractItemModel *modessl = Table_model;
    for(int rowNum=0; rowNum<MAXrowNum; rowNum++)
    {
        BestIP="";
        QModelIndex indextemp = modessl->index(rowNum, 0);
        QVariant datatemp = modessl->data(indextemp);
        QString WebSite = datatemp.toString();
        WebSite = WebSite.trimmed();
        if(WebSite=="")
        {
            Send_TextBrowser_NewMSG("您没有为第["+QString::number((rowNum+1),10)+"]行填写网址!");
            continue;
        }
        //===============
        indextemp = modessl->index(rowNum, 1);
        datatemp = modessl->data(indextemp);
        QString IP_str = datatemp.toString();
        IP_str = IP_str.trimmed();
        if(IP_str=="")
        {
            Send_TextBrowser_NewMSG("您没有为["+WebSite+"]填写IP地址!");
            continue;
        }
        QStringList IP_List = IP_str.split(",");
        IP_List.removeAll("");
        //===============
        QtConcurrent::run(this, &MainWindow::Ping,WebSite,IP_List);
        while (BestIP=="")
        {
            QThread::msleep(500);
        }
        OutPut_List.append(BestIP+" "+WebSite+"\n");
    }
    emit Send_TestAndOutput_Fin();
}

void MainWindow::TestAndOutput_Fin()
{
    for(int i=0; i<OutPut_List.size(); i++)
    {
        ui->textBrowser_hosts->append(OutPut_List.at(i));
    }
    ui->pushButton_TestAndOutput->setEnabled(1);
    ui->groupBox_AddIP->setEnabled(1);
    ui->groupBox_AddWebSite->setEnabled(1);
    ui->pushButton_ClearList->setEnabled(1);
    ui->pushButton_DeleteItem->setEnabled(1);
    ui->pushButton_ReadList->setEnabled(1);
    ui->tableView->setEditTriggers(QAbstractItemView::DoubleClicked);
    ui->textBrowser_progress->append("测试完成");
}

void MainWindow::Ping(QString WebSite,QStringList IP_List)
{
    QString BestIP_tmp = "";
    qint64 MinTimeCost = 9999999999;
    qint64 timeCost;
    for(int i=0; i<IP_List.size(); i++)
    {
        timeCost =0 ;
        QString IP = IP_List.at(i);
        IP = IP.trimmed();
        if(IP=="")
        {
            continue;
        }
        //===============
        QProcess Ping_cmd;
        qint64 StartTime = QDateTime::currentMSecsSinceEpoch();
        Ping_cmd.start("ping "+IP);
        Ping_cmd.waitForStarted(10000);
        Ping_cmd.waitForFinished(10000);
        qint64 EndTime = QDateTime::currentMSecsSinceEpoch();
        timeCost = EndTime-StartTime;
        //================
        emit Send_TextBrowser_NewMSG("网址: ["+WebSite+"] IP:["+IP+"] 耗时:["+QString::number(timeCost,10)+"]");
        if(timeCost<=MinTimeCost)
        {
            MinTimeCost= timeCost;
            BestIP_tmp = IP;
        }
    }
    BestIP = BestIP_tmp;
}

void MainWindow::TextBrowser_NewMSG(QString msg)
{
    ui->textBrowser_progress->append(msg);
}

void MainWindow::on_pushButton_CopyHosts_clicked()
{
    QClipboard *clip=QApplication::clipboard();
    clip->setText(ui->textBrowser_hosts->toPlainText());
}

void MainWindow::on_pushButton_GetIP_clicked()
{
    if(curRow!=-1)
    {
        QAbstractItemModel *modessl = Table_model;
        QModelIndex indextemp = modessl->index(curRow, 0);
        QVariant datatemp = modessl->data(indextemp);
        QString WebSite = datatemp.toString();
        QDesktopServices::openUrl(QUrl("https://ping.chinaz.com/"+WebSite));
    }
    else
    {
        QMessageBox *MSG = new QMessageBox();
        MSG->setWindowTitle("错误");
        MSG->setText("您未选中任何条目.请先在列表中选中条目后继续.");
        MSG->setIcon(QMessageBox::Information);
        MSG->setModal(true);
        MSG->show();
        return;
    }
}

void MainWindow::on_pushButton_ClearList_clicked()
{
    ui->tableView->setUpdatesEnabled(false);
    //=====
    Table_model->clear();
    Init_Table();
    curRow = -1;
    //=====
    ui->tableView->setUpdatesEnabled(true);
}


void MainWindow::on_pushButton_checkUpdate_clicked()
{
    QDesktopServices::openUrl(QUrl("https://github.com/AaronFeng753/Smart-Hosts-Manager/releases"));
}

void MainWindow::on_pushButton_OfficalWebSite_clicked()
{
    QDesktopServices::openUrl(QUrl("https://github.com/AaronFeng753/Smart-Hosts-Manager"));
}

void MainWindow::on_pushButton_SaveList_clicked()
{
    QString Table_FileList_ini = Current_Path+"/Table.ini";
    QFile::remove(Current_Path+"/test");
    QFile file_test(Current_Path+"/test");
    file_test.open(QIODevice::ReadWrite);
    file_test.close();
    if(!QFile::exists(Current_Path+"/test"))
    {
        QMessageBox *MSG = new QMessageBox();
        MSG->setWindowTitle("错误");
        MSG->setText("没有对程序所在文件夹的写入权限,请重启软件并授予管理员权限!");
        MSG->setIcon(QMessageBox::Information);
        MSG->setModal(true);
        MSG->show();
        return;
    }
    if(Table_model->rowCount()==0)
    {
        QMessageBox *MSG = new QMessageBox();
        MSG->setWindowTitle("错误");
        MSG->setText("当前列表为空!");
        MSG->setIcon(QMessageBox::Information);
        MSG->setModal(true);
        MSG->show();
        return;
    }
    //================
    QFile::remove(Table_FileList_ini);
    //=================
    QSettings *configIniWrite = new QSettings(Table_FileList_ini, QSettings::IniFormat);
    //================= 添加警告 =========================
    configIniWrite->setValue("/Warning/EN", "Do not modify this file! It may cause the program to crash! If problems occur after the modification, delete this article and restart the program.");
    //================= 存储table=========================
    configIniWrite->setValue("/table/rowCount", Table_model->rowCount());
    for(int i=0; i<Table_model->rowCount(); i++)
    {
        QAbstractItemModel *modessl = Table_model;
        //===
        QModelIndex indextemp = modessl->index(i, 0);
        QVariant datatemp = modessl->data(indextemp);
        QString Website = datatemp.toString();
        configIniWrite->setValue("/table/"+QString::number(i,10)+"_Website", Website);
        //===
        indextemp = modessl->index(i, 1);
        datatemp = modessl->data(indextemp);
        QString IP = datatemp.toString();
        configIniWrite->setValue("/table/"+QString::number(i,10)+"_IP", IP);
    }
}

void MainWindow::on_pushButton_ReadList_clicked()
{
    ui->tableView->setUpdatesEnabled(false);
    Table_model->clear();
    Init_Table();
    curRow = -1;
    QString Table_FileList_ini = Current_Path+"/Table.ini";
    if(!QFile::exists(Table_FileList_ini))
    {
        QMessageBox *MSG = new QMessageBox();
        MSG->setWindowTitle("错误");
        MSG->setText("找不到已保存的列表.");
        MSG->setIcon(QMessageBox::Information);
        MSG->setModal(true);
        MSG->show();
        return;
        return;
    }
    //=================
    QSettings *configIniRead = new QSettings(Table_FileList_ini, QSettings::IniFormat);
    //====================
    int rowCount = configIniRead->value("/table/rowCount").toInt();
    //========= 加载 ========
    for(int i=0; i<rowCount; i++)
    {
        //===========
        QString Website =configIniRead->value("/table/"+QString::number(i,10)+"_Website").toString();
        QString IP =configIniRead->value("/table/"+QString::number(i,10)+"_IP").toString();
        //===============
        Table_model->setItem(i, 0, new QStandardItem(Website));
        Table_model->setItem(i, 1, new QStandardItem(IP));
    }
    ui->tableView->setUpdatesEnabled(true);
}

void MainWindow::on_pushButton_DeleteItem_clicked()
{
    if(curRow!=-1)
    {
        ui->tableView->setUpdatesEnabled(false);
        Table_model->removeRow(curRow);
        curRow=-1;
        ui->tableView->clearSelection();
        ui->tableView->setUpdatesEnabled(true);
    }
    else
    {
        QMessageBox *MSG = new QMessageBox();
        MSG->setWindowTitle("错误");
        MSG->setText("您未选中任何条目.请先在列表中选中条目后继续.");
        MSG->setIcon(QMessageBox::Information);
        MSG->setModal(true);
        MSG->show();
        return;
    }
}
